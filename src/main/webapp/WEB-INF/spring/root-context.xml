<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"   
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
    	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
        	
	<!--**********************************************************************************************-->
	<!-- [DB 정보와 커넥션풀을 관리하는 BasicDataSource 객체] 등록하기 -->
	<!--**********************************************************************************************-->
	 <bean  id="basicDataSource"  class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
	 <!-- <bean  id="dataSourceSpied"  class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"> -->
        	<!-- <property name="driverClassName" value="net.sf.log4jdbc.DriverSpy" /> -->
	        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	        <property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE" />
	        <property name="username" value="system" />
	        <property name="password" value="123" />
	</bean>		
	 <!--<bean  id="basicDBDataSource"  class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
	        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	        <property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE" />
	        <property name="username" value="system" />
	        <property name="password" value="123" />
	</bean>  -->
	
	<!--**********************************************************************************************-->
	<!-- [DB 정보 관리],[커넥션풀 관리],[MyBatis SQL 설정 XML 파일의 쿼리를 로그로 출력]하는 [Log4jdbcProxyDataSource 객체] 등록하기 -->
	<!-- 	[생성자 매개변수]에 [BasicDataSource 객체]를 전달한다. -->
	<!-- 	[속성변수 logFormatter]에 [Log4JdbcCustomFormatter 객체]를 생성해 저장한다. -->
	<!--**********************************************************************************************-->
	<bean id="log4jdbcProxyDataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="basicDataSource" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE" />
				<property name="sqlPrefix" value="SQL : "/>
			</bean>
		</property>
	</bean>
	
	<!--**********************************************************************************************-->
	<!-- [트랜잭션]을 관리하는 [DataSourceTransactionManager 객체] 등록하기 -->
	<!-- 	[속성변수 dataSource]에 [Log4jdbcProxyDataSource 객체]를 저장한다. -->
	<!-- 		[Log4jdbcProxyDataSource 객체]가 없을 경우 [BasicDataSource 객체]를 [속성변수 dataSource]에 저장한다 -->
	<!--**********************************************************************************************-->
	<bean  id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property  name="dataSource"  ref="log4jdbcProxyDataSource"/>
	</bean>
		
	<!--**********************************************************************************************-->
	<!-- [MyBatis SQL 설정 XML 파일]을 관리하는 [SqlSessionFactoryBean 객체] 등록하기 -->
	<!-- 	[속성변수 dataSource]에 [Log4jdbcProxyDataSource 객체]를 저장한다. -->
	<!-- 		[Log4jdbcProxyDataSource 객체]가 없을 경우 [BasicDataSource 객체]를 [속성변수 dataSource]에 저장한다 -->
	<!-- 	[속성변수 mapperLocations]에 [MyBatis SQL 설정 XML 파일]의 경로를 저장한다. -->
	<!--**********************************************************************************************-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="log4jdbcProxyDataSource"/>
		<property name="mapperLocations" value="classpath:com/naver/erp/*.xml"/>		
	</bean> 
	
	<!--**********************************************************************************************-->
	<!-- [MyBatis SQL 설정 XML 파일]에 존재하는 SQL 구문을 실행하여 DB 연동을 하는 [SqlSessionTemplate 객체] 등록하기 -->
	<!-- 	[생성자 매개변수]에 [SqlSessionFactoryBean 객체]를 전달한다. -->
	<!--**********************************************************************************************-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean> 
	
	<!--**********************************************************************************************-->
	<!-- [DAO 인터페이스]와 [MyBatis SQL 설정 XML 파일]의 구조가 일치하는지 검사하는 [MapperScannerConfigurer 객체] 등록하기 -->
	<!-- 	[속성변수 basePackage]에 [DAO 인터페이스]의 패키지 경로를 저장한다. -->
	<!-- 	[속성변수 sqlSessionFactoryBeanName]에 [SqlSessionFactoryBean 객체]를 저장한다. -->
	<!--**********************************************************************************************-->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.naver.erp.dao" />    
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> 
	<!---->
</beans>












































